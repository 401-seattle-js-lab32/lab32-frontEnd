{"ast":null,"code":"import _objectSpread from \"/Users/coreymarchand/Desktop/codeFellows/401/assignments/lab32/lab32-frontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/coreymarchand/Desktop/codeFellows/401/assignments/lab32/lab32-frontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/coreymarchand/Desktop/codeFellows/401/assignments/lab32/lab32-frontEnd/src/app.js\";\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport Q from '@nmq/q/client'; // Connect outside of the render cycle ...\n\nconst socket = io.connect('http://localhost:3000');\nconst queue = new Q('deeds');\n\nconst App = props => {\n  const _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        values = _useState2[0],\n        setValues = _useState2[1];\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        queueMessage = _useState4[0],\n        setQueueMessage = _useState4[1];\n\n  const _useState5 = useState({}),\n        _useState6 = _slicedToArray(_useState5, 2),\n        socketMessage = _useState6[0],\n        setSocketMessage = _useState6[1];\n\n  const handleChange = e => {\n    setValues(_objectSpread({}, values, {\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    e.target.reset();\n    Q.publish('deeds', 'work', values);\n    socket.emit('words', values);\n  };\n\n  useEffect(() => {\n    queue.subscribe('work', message => {\n      setQueueMessage(message);\n    });\n    socket.on('incoming', message => {\n      setSocketMessage(message);\n    });\n  }, []);\n  return React.createElement(React.Fragment, null, React.createElement(\"pre\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"Form Values: \", JSON.stringify(values)), React.createElement(\"pre\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"Queue Values: \", JSON.stringify(queueMessage)), React.createElement(\"pre\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"Socket Values: \", JSON.stringify(socketMessage)), React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    name: \"firstName\",\n    placeholder: \"First Name\",\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    name: \"lastName\",\n    placeholder: \"Last Name\",\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"Save\")));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/coreymarchand/Desktop/codeFellows/401/assignments/lab32/lab32-frontEnd/src/app.js"],"names":["React","useState","useEffect","io","Q","socket","connect","queue","App","props","values","setValues","queueMessage","setQueueMessage","socketMessage","setSocketMessage","handleChange","e","target","name","value","handleSubmit","preventDefault","reset","publish","emit","subscribe","message","on","JSON","stringify"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AAEA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAOC,CAAP,MAAc,eAAd,C,CAEA;;AACA,MAAMC,MAAM,GAAGF,EAAE,CAACG,OAAH,CAAW,uBAAX,CAAf;AACA,MAAMC,KAAK,GAAG,IAAIH,CAAJ,CAAM,OAAN,CAAd;;AAEA,MAAMI,GAAG,GAAIC,KAAD,IAAW;AAAA,oBAEOR,QAAQ,CAAC,EAAD,CAFf;AAAA;AAAA,QAEdS,MAFc;AAAA,QAENC,SAFM;;AAAA,qBAGmBV,QAAQ,CAAC,EAAD,CAH3B;AAAA;AAAA,QAGdW,YAHc;AAAA,QAGAC,eAHA;;AAAA,qBAIqBZ,QAAQ,CAAC,EAAD,CAJ7B;AAAA;AAAA,QAIda,aAJc;AAAA,QAICC,gBAJD;;AAMrB,QAAMC,YAAY,GAAGC,CAAC,IAAI;AACxBN,IAAAA,SAAS,mBAAKD,MAAL;AAAa,OAACO,CAAC,CAACC,MAAF,CAASC,IAAV,GAAiBF,CAAC,CAACC,MAAF,CAASE;AAAvC,OAAT;AACD,GAFD;;AAIA,QAAMC,YAAY,GAAIJ,CAAD,IAAO;AAC1BA,IAAAA,CAAC,CAACK,cAAF;AACAL,IAAAA,CAAC,CAACC,MAAF,CAASK,KAAT;AAEAnB,IAAAA,CAAC,CAACoB,OAAF,CAAU,OAAV,EAAmB,MAAnB,EAA2Bd,MAA3B;AACAL,IAAAA,MAAM,CAACoB,IAAP,CAAY,OAAZ,EAAqBf,MAArB;AAED,GAPD;;AASAR,EAAAA,SAAS,CAAE,MAAM;AACfK,IAAAA,KAAK,CAACmB,SAAN,CAAgB,MAAhB,EAAwBC,OAAO,IAAI;AACjCd,MAAAA,eAAe,CAACc,OAAD,CAAf;AACD,KAFD;AAIAtB,IAAAA,MAAM,CAACuB,EAAP,CAAU,UAAV,EAAsBD,OAAO,IAAI;AAC/BZ,MAAAA,gBAAgB,CAACY,OAAD,CAAhB;AACD,KAFD;AAID,GATQ,EASN,EATM,CAAT;AAYA,SACE,0CACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAmBE,IAAI,CAACC,SAAL,CAAepB,MAAf,CAAnB,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAoBmB,IAAI,CAACC,SAAL,CAAelB,YAAf,CAApB,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAqBiB,IAAI,CAACC,SAAL,CAAehB,aAAf,CAArB,CAHF,EAIE;AAAM,IAAA,QAAQ,EAAEO,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,IAAI,EAAC,WAAZ;AAAwB,IAAA,WAAW,EAAC,YAApC;AAAiD,IAAA,QAAQ,EAAEL,YAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAO,IAAA,IAAI,EAAC,UAAZ;AAAuB,IAAA,WAAW,EAAC,WAAnC;AAA+C,IAAA,QAAQ,EAAEA,YAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,CAJF,CADF;AAYD,CA3CD;;AA6CA,eAAeR,GAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\n\nimport io from 'socket.io-client';\nimport Q from '@nmq/q/client';\n\n// Connect outside of the render cycle ...\nconst socket = io.connect('http://localhost:3000');\nconst queue = new Q('deeds');\n\nconst App = (props) => {\n\n  const [values, setValues] = useState({});\n  const [queueMessage, setQueueMessage] = useState({});\n  const [socketMessage, setSocketMessage] = useState({});\n\n  const handleChange = e => {\n    setValues({...values, [e.target.name]: e.target.value});\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    e.target.reset();\n\n    Q.publish('deeds', 'work', values);\n    socket.emit('words', values);\n\n  };\n\n  useEffect( () => {\n    queue.subscribe('work', message => {\n      setQueueMessage(message);\n    });\n\n    socket.on('incoming', message => {\n      setSocketMessage(message);\n    });\n\n  }, []);\n\n\n  return (\n    <>\n      <pre>Form Values: {JSON.stringify(values)}</pre>\n      <pre>Queue Values: {JSON.stringify(queueMessage)}</pre>\n      <pre>Socket Values: {JSON.stringify(socketMessage)}</pre>\n      <form onSubmit={handleSubmit}>\n        <input name='firstName' placeholder=\"First Name\" onChange={handleChange} />\n        <input name='lastName' placeholder=\"Last Name\" onChange={handleChange} />\n        <button>Save</button>\n      </form>\n    </>\n  );\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}