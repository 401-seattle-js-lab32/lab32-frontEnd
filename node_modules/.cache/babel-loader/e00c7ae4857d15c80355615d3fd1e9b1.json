{"ast":null,"code":"import _slicedToArray from \"/Users/coreymarchand/Desktop/codeFellows/401/assignments/lab32/lab32-frontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/coreymarchand/Desktop/codeFellows/401/assignments/lab32/lab32-frontEnd/src/app.js\";\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport Q from '@nmq/q/client';\nimport useForm from './hooks/form';\nimport useSocket from './hooks/queue';\nimport useQueue from './hooks/socket'; // Connect outside of the render cycle ...\n\nconst socket = io.connect('http://localhost:3000');\nconst queue = new Q('deeds');\nQ.publish('deeds', 'work', '');\n\nconst App = props => {\n  const _useSocket = useSocket(socket),\n        _useSocket2 = _slicedToArray(_useSocket, 2),\n        socketOn = _useSocket2[0],\n        socketEmit = _useSocket2[1];\n\n  const _useQueue = useQueue(Q, queue),\n        _useQueue2 = _slicedToArray(_useQueue, 2),\n        queuePublish = _useQueue2[0],\n        queueSubscribe = _useQueue2[1];\n\n  const _useForm = useForm(queuePublish, socketEmit),\n        _useForm2 = _slicedToArray(_useForm, 3),\n        values = _useForm2[0],\n        onChange = _useForm2[1],\n        onSubmit = _useForm2[2];\n\n  const _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        form = _useState2[0],\n        setForm = _useState2[1];\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        queueMessage = _useState4[0],\n        setQueueMessage = _useState4[1];\n\n  const _useState5 = useState({}),\n        _useState6 = _slicedToArray(_useState5, 2),\n        socketMessage = _useState6[0],\n        setSocketMessage = _useState6[1]; // const handleChange = e => {\n  //   setValues({...values, [e.target.name]: e.target.value});\n  // };\n  // const handleSubmit = (e) => {\n  //   e.preventDefault();\n  //   e.target.reset();\n  //   Q.publish('deeds', 'work', values);\n  //   socket.emit('words', values);\n  // };\n\n\n  useEffect(() => {\n    queue.subscribe('work', message => {\n      setQueueMessage(message);\n    });\n    socket.on('incoming', message => {\n      setSocketMessage(message);\n    });\n  }, []);\n  return React.createElement(React.Fragment, null, React.createElement(\"pre\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"Form Values: \", JSON.stringify(values)), React.createElement(\"pre\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"Queue Values: \", JSON.stringify(queueMessage)), React.createElement(\"pre\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"Socket Values: \", JSON.stringify(socketMessage)), React.createElement(\"form\", {\n    onSubmit: onSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    name: \"firstName\",\n    placeholder: \"First Name\",\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    name: \"lastName\",\n    placeholder: \"Last Name\",\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"Save\")));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/coreymarchand/Desktop/codeFellows/401/assignments/lab32/lab32-frontEnd/src/app.js"],"names":["React","useState","useEffect","io","Q","useForm","useSocket","useQueue","socket","connect","queue","publish","App","props","socketOn","socketEmit","queuePublish","queueSubscribe","values","onChange","onSubmit","form","setForm","queueMessage","setQueueMessage","socketMessage","setSocketMessage","subscribe","message","on","JSON","stringify"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AAEA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAOC,CAAP,MAAc,eAAd;AAEA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,OAAOC,QAAP,MAAqB,gBAArB,C,CAGA;;AACA,MAAMC,MAAM,GAAGL,EAAE,CAACM,OAAH,CAAW,uBAAX,CAAf;AACA,MAAMC,KAAK,GAAG,IAAIN,CAAJ,CAAM,OAAN,CAAd;AACAA,CAAC,CAACO,OAAF,CAAU,OAAV,EAAmB,MAAnB,EAA2B,EAA3B;;AAEA,MAAMC,GAAG,GAAIC,KAAD,IAAW;AAAA,qBAEUP,SAAS,CAACE,MAAD,CAFnB;AAAA;AAAA,QAEdM,QAFc;AAAA,QAEJC,UAFI;;AAAA,oBAGkBR,QAAQ,CAACH,CAAD,EAAIM,KAAJ,CAH1B;AAAA;AAAA,QAGdM,YAHc;AAAA,QAGAC,cAHA;;AAAA,mBAIgBZ,OAAO,CAACW,YAAD,EAAeD,UAAf,CAJvB;AAAA;AAAA,QAIdG,MAJc;AAAA,QAINC,QAJM;AAAA,QAIIC,QAJJ;;AAAA,oBAKGnB,QAAQ,CAAC,EAAD,CALX;AAAA;AAAA,QAKdoB,IALc;AAAA,QAKRC,OALQ;;AAAA,qBAMmBrB,QAAQ,CAAC,EAAD,CAN3B;AAAA;AAAA,QAMdsB,YANc;AAAA,QAMAC,eANA;;AAAA,qBAOqBvB,QAAQ,CAAC,EAAD,CAP7B;AAAA;AAAA,QAOdwB,aAPc;AAAA,QAOCC,gBAPD,kBASrB;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;;;AAEAxB,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,KAAK,CAACiB,SAAN,CAAgB,MAAhB,EAAwBC,OAAO,IAAI;AACjCJ,MAAAA,eAAe,CAACI,OAAD,CAAf;AACD,KAFD;AAIApB,IAAAA,MAAM,CAACqB,EAAP,CAAU,UAAV,EAAsBD,OAAO,IAAI;AAC/BF,MAAAA,gBAAgB,CAACE,OAAD,CAAhB;AACD,KAFD;AAID,GATQ,EASN,EATM,CAAT;AAYA,SACE,0CACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAmBE,IAAI,CAACC,SAAL,CAAeb,MAAf,CAAnB,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAoBY,IAAI,CAACC,SAAL,CAAeR,YAAf,CAApB,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAqBO,IAAI,CAACC,SAAL,CAAeN,aAAf,CAArB,CAHF,EAIE;AAAM,IAAA,QAAQ,EAAEL,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,IAAI,EAAC,WAAZ;AAAwB,IAAA,WAAW,EAAC,YAApC;AAAiD,IAAA,QAAQ,EAAED,QAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAO,IAAA,IAAI,EAAC,UAAZ;AAAuB,IAAA,WAAW,EAAC,WAAnC;AAA+C,IAAA,QAAQ,EAAEA,QAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,CAJF,CADF;AAYD,CA9CD;;AAgDA,eAAeP,GAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\n\nimport io from 'socket.io-client';\nimport Q from '@nmq/q/client';\n\nimport useForm from './hooks/form';\nimport useSocket from './hooks/queue';\nimport useQueue from './hooks/socket';\n\n\n// Connect outside of the render cycle ...\nconst socket = io.connect('http://localhost:3000');\nconst queue = new Q('deeds');\nQ.publish('deeds', 'work', '');\n\nconst App = (props) => {\n\n  const [socketOn, socketEmit] = useSocket(socket);\n  const [queuePublish, queueSubscribe] = useQueue(Q, queue);\n  const [values, onChange, onSubmit] = useForm(queuePublish, socketEmit);\n  const [form, setForm] = useState({});\n  const [queueMessage, setQueueMessage] = useState({});\n  const [socketMessage, setSocketMessage] = useState({});\n\n  // const handleChange = e => {\n  //   setValues({...values, [e.target.name]: e.target.value});\n  // };\n\n  // const handleSubmit = (e) => {\n  //   e.preventDefault();\n  //   e.target.reset();\n\n  //   Q.publish('deeds', 'work', values);\n  //   socket.emit('words', values);\n\n  // };\n\n  useEffect(() => {\n    queue.subscribe('work', message => {\n      setQueueMessage(message);\n    });\n\n    socket.on('incoming', message => {\n      setSocketMessage(message);\n    });\n\n  }, []);\n\n\n  return (\n    <>\n      <pre>Form Values: {JSON.stringify(values)}</pre>\n      <pre>Queue Values: {JSON.stringify(queueMessage)}</pre>\n      <pre>Socket Values: {JSON.stringify(socketMessage)}</pre>\n      <form onSubmit={onSubmit}>\n        <input name='firstName' placeholder=\"First Name\" onChange={onChange} />\n        <input name='lastName' placeholder=\"Last Name\" onChange={onChange} />\n        <button>Save</button>\n      </form>\n    </>\n  );\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}